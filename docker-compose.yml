version: '3.7'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    hostname: zookeeper
    container_name: zookeeper
    restart: always
    ports:
      - "${ZOOKEEPER_PORT}:${ZOOKEEPER_PORT}"
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_PORT}
      ZOOKEEPER_TICK_TIME: 2000

  broker1:
    user: root
    hostname: broker1
    container_name: broker1
    restart: on-failure
    image: confluentinc/cp-kafka:7.5.0
    depends_on:
      - zookeeper
    ports:
      - "${KAFKA_BROKER_INTERNAL_PORT}:${KAFKA_BROKER_INTERNAL_PORT}"
      - "${KAFKA_BROKER_EXTERNAL_PORT}:${KAFKA_BROKER_EXTERNAL_PORT}"
      - "${KAFKA_JMX_PORT}:${KAFKA_JMX_PORT}"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker1:${KAFKA_BROKER_EXTERNAL_PORT},PLAINTEXT_HOST://localhost:${KAFKA_BROKER_INTERNAL_PORT}
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:${ZOOKEEPER_PORT}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 2
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: ${KAFKA_JMX_PORT}
      KAFKA_JMX_HOSTNAME: localhost 

  broker2:
    user: root
    hostname: broker2
    container_name: broker2
    restart: on-failure
    image: confluentinc/cp-kafka:7.5.0
    depends_on:
      - zookeeper
    ports:
      - "${KAFKA_BROKER_INTERNAL_PORT_2}:${KAFKA_BROKER_INTERNAL_PORT_2}"
      - "${KAFKA_BROKER_EXTERNAL_PORT_2}:${KAFKA_BROKER_EXTERNAL_PORT_2}"
      - "${KAFKA_JMX_PORT_2}:${KAFKA_JMX_PORT_2}"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker2:${KAFKA_BROKER_EXTERNAL_PORT_2},PLAINTEXT_HOST://localhost:${KAFKA_BROKER_INTERNAL_PORT_2}
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:${ZOOKEEPER_PORT}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 2
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: ${KAFKA_JMX_PORT_2}
      KAFKA_JMX_HOSTNAME: localhost 

  schema-registry:
    image: confluentinc/cp-schema-registry:7.5.0
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - broker1
    ports:
      - "${SCHEMA_REGISTRY_PORT}:${SCHEMA_REGISTRY_PORT}"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker1:${KAFKA_BROKER_EXTERNAL_PORT},broker2:${KAFKA_BROKER_EXTERNAL_PORT_2}'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:${SCHEMA_REGISTRY_PORT}

  connect:
    image: cnfldemos/kafka-connect-datagen:0.6.2-7.5.0
    hostname: connect
    container_name: connect
    depends_on:
      - broker1
      - schema-registry
    ports:
      - "${CONNECT_PORT}:${CONNECT_PORT}"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: 'broker1:${KAFKA_BROKER_EXTERNAL_PORT},broker2:${KAFKA_BROKER_EXTERNAL_PORT_2}'
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:${SCHEMA_REGISTRY_PORT}
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
      CONNECT_LOG4J_LOGGERS: org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR

  ksqldb-server:
    image: confluentinc/cp-ksqldb-server:7.5.0
    hostname: ksqldb-server
    container_name: ksqldb-server
    depends_on:
      - broker1
      - connect
    ports:
      - "${KSQL_PORT}:${KSQL_PORT}"
    environment:
      KSQL_CONFIG_DIR: "/etc/ksql"
      KSQL_BOOTSTRAP_SERVERS: "broker1:${KAFKA_BROKER_EXTERNAL_PORT},broker2:${KAFKA_BROKER_EXTERNAL_PORT_2}"
      KSQL_HOST_NAME: ksqldb-server
      KSQL_LISTENERS: "http://0.0.0.0:${KSQL_PORT}"
      KSQL_CACHE_MAX_BYTES_BUFFERING: 0
      KSQL_KSQL_SCHEMA_REGISTRY_URL: "http://schema-registry:${SCHEMA_REGISTRY_PORT}"
      KSQL_KSQL_CONNECT_URL: "http://connect:${CONNECT_PORT}"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_REPLICATION_FACTOR: 1
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: 'true'
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: 'true'

  ksqldb-cli:
    image: confluentinc/cp-ksqldb-cli:7.5.0
    container_name: ksqldb-cli
    depends_on:
      - broker1
      - connect
      - ksqldb-server
    entrypoint: /bin/sh
    tty: true

  ksql-datagen:
    image: confluentinc/ksqldb-examples:7.5.0
    hostname: ksql-datagen
    container_name: ksql-datagen
    depends_on:
      - ksqldb-server
      - broker1
      - schema-registry
      - connect
    command: "bash -c 'echo Waiting for Kafka to be ready... cub kafka-ready -b broker1:${KAFKA_BROKER_EXTERNAL_PORT},broker2:${KAFKA_BROKER_EXTERNAL_PORT_2} 1 40 && \
              cub kafka-ready -b broker1:${KAFKA_BROKER_EXTERNAL_PORT},broker2:${KAFKA_BROKER_EXTERNAL_PORT_2} 1 40 && \
              echo Waiting for Confluent Schema Registry to be ready... cub sr-ready schema-registry ${SCHEMA_REGISTRY_PORT} 40 && \
              cub sr-ready schema-registry ${SCHEMA_REGISTRY_PORT} 40 && \
              echo Waiting a few seconds for topic creation to finish... && \
              sleep 11 && \
              echo done && \
              tail -f /dev/null'"
    environment:
      KSQL_CONFIG_DIR: "/etc/ksql"
      STREAMS_BOOTSTRAP_SERVERS: broker1:${KAFKA_BROKER_EXTERNAL_PORT},broker2:${KAFKA_BROKER_EXTERNAL_PORT_2}
      STREAMS_SCHEMA_REGISTRY_HOST: schema-registry
      STREAMS_SCHEMA_REGISTRY_PORT: ${SCHEMA_REGISTRY_PORT}

  rest-proxy:
    image: confluentinc/cp-kafka-rest:7.5.0
    depends_on:
      - broker1
      - schema-registry
    ports:
      - ${REST_PROXY}:${REST_PROXY}
    hostname: rest-proxy
    container_name: rest-proxy
    environment:
      KAFKA_REST_HOST_NAME: rest-proxy
      KAFKA_REST_BOOTSTRAP_SERVERS: 'broker1:${KAFKA_BROKER_EXTERNAL_PORT},broker2:${KAFKA_BROKER_EXTERNAL_PORT_2}'
      KAFKA_REST_LISTENERS: "http://0.0.0.0:${REST_PROXY}"
      KAFKA_REST_SCHEMA_REGISTRY_URL: 'http://schema-registry:${SCHEMA_REGISTRY_PORT}'
  
  postgresql:
    image: postgres:latest
    hostname: postgresql
    container_name: postgresql
    volumes:
      - pg_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: "${POSTGRESQL_DB}"
      POSTGRES_USER: "${POSTGRESQL_USER}"
      POSTGRES_PASSWORD: "${POSTGRESQL_PASSWORD}"
      POSTGRES_HOST_AUTH_METHOD: "scram-sha-256"

  conduktor-platform:
    image: conduktor/conduktor-platform:1.19.2
    hostname: conduktor-platform
    container_name: conduktor-platform
    depends_on:
      - postgresql
      - broker1
      - broker2
    ports:
      - "${CONDUKTOR_PLATFORM_PORT}:${CONDUKTOR_PLATFORM_PORT}"
    volumes:
      - conduktor_data:/var/conduktor
    environment:
      CDK_DATABASE_URL: "postgresql://${POSTGRESQL_USER}:${POSTGRESQL_PASSWORD}@postgresql:5432/${POSTGRESQL_DB}"
      CDK_MONITORING_CORTEX-URL: http://conduktor-monitoring:${CDK_MONITORING_CORTEX_PORT}/
      CDK_MONITORING_ALERT-MANAGER-URL: http://conduktor-monitoring:${CDK_MONITORING_ALERT_PORT}/
      CDK_MONITORING_CALLBACK-URL: http://conduktor-platform:${CONDUKTOR_PLATFORM_PORT}/monitoring/api/
      CDK_MONITORING_NOTIFICATIONS-CALLBACK-URL: http://localhost:${CONDUKTOR_PLATFORM_PORT}
    healthcheck:
      test: curl -f http://localhost:${CONDUKTOR_PLATFORM_PORT}/platform/api/modules/health/live || exit 1
      interval: 10s
      start_period: 10s
      timeout: 5s
      retries: 3

  conduktor-monitoring:
    image: conduktor/conduktor-platform-cortex:1.19.2
    container_name: conduktor-monitoring
    environment:
      CDK_CONSOLE-URL: "http://conduktor-platform:${CONDUKTOR_PLATFORM_PORT}"

  # nginx:
  #   image: nginx:latest
  #   ports:
  #     - "80:80"
  #   volumes:
  #     - ./nginx.conf:/etc/nginx/nginx.conf:ro
  #   depends_on:
  #     - rest-proxy
  #     - ksqldb-server
  #     - schema-registry
      
volumes:
  pg_data:
  conduktor_data: